import org.gradle.api.internal.file.BaseDirFileResolver
import org.gradle.api.internal.file.FileResolver
import org.gradle.internal.nativeplatform.filesystem.FileSystems

buildscript {
	repositories {
    	mavenCentral()
    }
	dependencies {
        classpath group: 'org.gradlefx', name: 'gradlefx', version: '0.6.4'
    }
}

apply plugin: 'gradlefx'
apply plugin: 'scaffold'

type = 'swf'
frameworkLinkage = 'none'
mainClass = 'Main.as'

flexUnit.command = resolveFlexUnitCommand(System.getenv()['FLASH_PLAYER_EXE'])
def flexUnitHome = resolveFlexUnitHome(System.getenv()['FLEXUNIT_HOME'])
def flaDirectory = 'src/main/fla'
def scriptsDirectory = 'src/main/scripts' 
def flaBuildScript = 'publish.jsfl'
def csBuildCommand = /C:\Program Files\Adobe\Adobe Flash CS6\Flash.exe/

repositories {
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
        name = 'Apache'
        addArtifactPattern 'http://apache.cu.be/flex/4.9.0/binaries/apache-flex-sdk-4.9.0-bin.zip'
    }
}

dependencies {
    flexSDK group: 'org.apache', name: 'apache-flex-sdk', version: '4.9.0', ext: 'zip'

    test files("${flexUnitHome}/flexunit-4.1.0-8-flex_4.1.0.16076.swc",
            "${flexUnitHome}/flexUnitTasks-4.1.0-8.jar",
            "${flexUnitHome}/flexunit-cilistener-4.1.0-8-4.1.0.16076.swc")
              
    merged files("${libsDir}") 
}

sdkAutoInstall {
    showPrompts = false
}

task flaBuild << { 
    copy {
    	from "${scriptsDirectory}/${flaBuildScript}"
        into buildDir
   	}                                               
   	
   	File finalFlaBuildScript = file("${buildDir}/${flaBuildScript}")     
   	File flaDirectoryPath = file(flaDirectory)     
   	String publishCall=/publishFlasWin("${flaDirectoryPath}\", "${libsDir}\", "${buildDir}\reports\");/.replace('\\', '\\\\')         
   	finalFlaBuildScript.append(publishCall)    
   	   	  	                                                                                               
   	ant.exec(executable:"cmd"){
   		arg(value:"/c")
   		arg(value:/"${finalFlaBuildScript}"/)
   	}
} 

compileFlex.dependsOn flaBuild

String resolveFlexUnitCommand(String flexUnitCommand){
	if (flexUnitCommand == null) {
    	flexUnitCommand = resolveFile('debugPlayer', 'flashplayer_11_sa.exe',
            'http://download.macromedia.com/pub/flashplayer/updaters/11/flashplayer_11_sa.exe')            
	}                                                                                               
	
	return flexUnitCommand
}

String resolveFlexUnitHome(String flexUnitHome){
	if (flexUnitHome == null) {
    	println('Resolve flexunit directory')

    	String flexUnitDirectory = 'flexunit'
    	String flexUnitDownloadUrl = 'http://flexunit.org/releases/flexunit-4.1.0-8-4.1.0.16076.zip'

    	FileResolver gradleUserHomeDirectoryResolver = new BaseDirFileResolver(FileSystems.default, gradleFxUserHomeDir)
    	File flexUnitDirectoryLocation = gradleUserHomeDirectoryResolver.resolve(flexUnitDirectory)

    	FileResolver flexUnitTaskLocationResolver = new BaseDirFileResolver(FileSystems.default, flexUnitDirectoryLocation)
    	File flexUnitTask = flexUnitTaskLocationResolver.resolve('flexUnitTasks-4.1.0-8.jar')

    	if (!flexUnitTask.exists()) {
        	File flexUnitZip = resolveFile(flexUnitDirectory, 'flexunit-4.1.0-8-4.1.0.16076.zip',
                'http://flexunit.org/releases/flexunit-4.1.0-8-4.1.0.16076.zip')

        	println('unzip file: flexunit-4.1.0-8-4.1.0.16076.zip')

        	ant.unzip(src: flexUnitZip.absolutePath, dest: gradleFxUserHomeDir, overwrite: "true")
	    }

    	flexUnitHome = flexUnitDirectoryLocation.absolutePath     
	}     
	
	return flexUnitHome
}

File resolveFile(String fileDirName, String fileName, String downloadUrl) {
    println("Resolve file: ${fileName}")

    FileResolver gradleUserHomeDirectoryResolver = new BaseDirFileResolver(FileSystems.default, gradleFxUserHomeDir)
    File fileDirectoryLocation = gradleUserHomeDirectoryResolver.resolve(fileDirName)

    FileResolver fileLocationResolver = new BaseDirFileResolver(FileSystems.default, fileDirectoryLocation)
    File fileLocation = fileLocationResolver.resolve(fileName)

    if (!fileLocation.exists()) {
        println("Download file from url: ${downloadUrl}")

        fileDirectoryLocation.mkdirs()
        fileLocation.createNewFile()
        fileLocation.withOutputStream { out -> out << new URL(downloadUrl).openStream() }
    }

    return fileLocation
}       

