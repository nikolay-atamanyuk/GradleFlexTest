# Проект для изучения возможности билда flex/flash приложений при помощи gradle.

## План работ
### Творческий минимум
- flex compile (Path to FlexSDK/maven dependency)
- as3 compile
- flex unit run (dependency)
- fla compile as static resource
- reliase compress 
- code quality (FlexPDM ?) before compile

### Дополнительные хотелки
- multy module project
- project dependency
- code coverage
- git submodule
- air project

## Установка Gradle и первые впечатления.
Раззипуй - скопируй + Gradle_Home/bin в общий Path. Без затей абсолютно.
Хорошая подсказка в коммандной строке, даже с цветом.
	D:\Projects\GradleFlexTest>gradle tasks
	:tasks
	
	------------------------------------------------------------
	All tasks runnable from root project
	------------------------------------------------------------
	
	Build Setup tasks
	-----------------
	setupBuild - Initializes a new Gradle build. [incubating]
	
	Help tasks
	----------
	dependencies - Displays all dependencies declared in root project 'GradleFlexTest'.
	dependencyInsight - Displays the insight into a specific dependency in root project 'GradleFlexTest'.
	help - Displays a help message
	projects - Displays the sub-projects of root project 'GradleFlexTest'.
	properties - Displays the properties of root project 'GradleFlexTest'.
	tasks - Displays the tasks runnable from root project 'GradleFlexTest' (some of the displayed tasks may belong to subprojects).
	
	To see all tasks and more detail, run with --all.
	
	BUILD SUCCESSFUL

Для начального понимания, как это все работает, можно прочитать начальные главы user guide, примерно до 9 главы. Этого вполне достаточно,
чтобы осознать базовые принципы работы системы. 
Хых, у командной строки есть user friendly gui для нелюбителей консоли: 
	gradle --gui

*Заметки* 
- При использовании командной строки, в папке запуска gradle создает свою временную папку .gradle, куда складывает временные
артефакты работы. Папка не большая, но после экспериментов ее бы лучше удалить или заигнорить в гите.
- При запуске gui, в папке запуска создается файл дополнительных настроек. Думаю, действовать по аналогии с первым.
- При попытке тестового билда пустой папки создается файл билда build.gradle с настройками по умолчанию. Мелочь, а приятно.

## Flex проект
Flex пока не входит в основную документацию и примеров по нему в поставке нет. Это как бы понятно, хотя, конечно, жаль, потому как
остальных примеров достаточно много. Но, беглый просмотр плагинов обрадовал наличием "признанного" плагина для flex - (GradleFX)[GradleFX]. 
С него и начнем. 

### GradleFX
На первый взгляд, проект неплохо документирован, хотя только смелый эксперимент покажет насколько именно.
Первая радость: плагин есть в центральном maven репозитории. Оттуда узнаю его последнюю версию ее и буду пробовать.
Вторая радость: есть больше одного варианта указать, с каким именно FlexSDK будет работать проект. Есть стандартный FLEX_HOME, прямое
указание пути на локальном диске и зависимости. Последний путь мне нравится больше всего, как наиболее универсальный.

Итак, определяю тип проекта как swf, беру зависимость от Apach Flex SDK (потому как раньше ее не пробовал) и определяю путь к зипу
автоустновки flex sdk (отличная фича, с учетом отсутсвия flex sdk в репозиториях).

*Первый запуск* 
Поскольку кроме build.gradle ничего нет, то на выходе получили fail, но это ожидаемо. Что же произошло еще исходя из лога (сам лог не выкладываю, 
уж больно большой)?
- В домашней директории появилась папка .gradle, которая является локальных хранилищем артефактов. Сюда, скорее всего, будет складываться
все, что будет скачано.
- Загрузился плагин GradleFX из центрального maven репозитория и разместился по .gradle\caches\artifacts-24\filestore\org.gradlefx\gradlefx\0.6.4\
(судя по всему, все загрузки попадают в .gradle\caches\artifacts-24\filestore\, вроде больше мест не нашел)
- Загрузился и распаковался ahache flex sdk
- Загрузился swf-object, swfobject-fabridge, osmf, спросили про лицензию на osmf, blase-ds, adobe flex sdk

Загрузилось, несколько больше, чем я рассчитывал, например adobe flex sdk мне не очень понятен, возможно это зависимость чего-то. Дважды
спрашивали, согласен ли я загрузить чего-то, может оттуда и ноги растут. Но тем не менее, это можно считать удачей, потому как требуемые
компоненты найдены.

### Scaffold и первый build.
Плагин scaffold - генерация типового проекта. По большому счету, это разовая акция, но почему бы не попробовать, раз уж она все равно есть. 
На текущий мометн scaffold имеет всего одну задачу - создать типовой проект. После создания, наверняка можно отключить.
	gradle scaffold
Как и ожидалось, создана структура папок и main.mxml файл заглушка. Пробую сделать первый билд из того, что получилось.

*Первая особенность* Очень долгая обработка Air SDK, при вызове любой задачи, даже dradle tasks, идет его раззиповка, а это явно лишнее.
Возможно, это моя ошибка, я включил обе зависимости от flex и от air. Пробую убрать air, как не сильно нужную прямо сейчас.
Оказывается, я не сильно внимательно прочитал документацию, там прямо сказано, что распаковка sdk не зависимо от типа результат и происходит
в одну и ту же папку. Это может означать, что при работе поочередно с различными типами проектов (air/flex) будет происходить раззиповка 
необходимого sdk. Если тип проекта не менялся, то повторной раззиповки не происходит.
Итак, первый билд провалился, второй завершился удачно. Что же было? Имея две зависимости, одна из которых исключает вторую получили:
- авто устновка flex sdk
- авто устновка air sdk (именно отсюда бралась длительная раззиповка)
- фактический билд main.mxml с помощью *последней* (air) установленной sdk
- результат - fail - не найден файл конфигурации, что достаточно логично.
Убираем air-зависимость, потому пробуем собрать flex. Собрано. Получаем папку buid, в которой лежит флеха и ее сопутствующие компоненты.
Вторая раззиповка не произошла, все в порядке.

*Заметка* Gralde постоянно выводит предупрежедения, которые должны попасть к разработчику плагина: некоторые методы помечены как deprecated,
в версии 2 (текущая 1.6) они будут удалены, используйте вместо них другие. 
Меня всегда радовали такие сообщения. Предупреждение гораздо приятнее, чем сразу удаление методов. К тому же, сразу указан новый путь. Явный
плюс разработчикам gradle. 

*Заметка* Этот эксперимент полностью объясняет "лишние" скачки, которые меня удивили в логе. Если air sdk зависит от *_adobe_* flex sdk,
что в общем логично, то он дополнительно и скачался. Как вывод - читать внимательнее и иногда думать. Это бывает полезно.

*Сравнение времени сборки*
---------------------------------
|build	|gradle	|maven	|idea	|
---------------------------------
|1	|12.031	|12.172	|13	|
---------------------------------
|2	|6.25	|7.63	|4	|
---------------------------------
Хотел еще сравнить с FlashDevelop, но он не выводит время сборки. Выигрыш IDEA скорее всего основан на одноразовой загрузке конфигурации, 
при первом билде проекта.

### As3 compile
Пробую перевести проект чистый as3. Можно еще отключить scaffold, но он вроде не мешает, хоть пока и больше не нужен. Наличие данного
плагина не влияет на скорость сборки, возможно чуть больше памяти занимает. Итак, меняю Main.mxml на Main.as. Билд не проходит. Совершенно
по честному говорит, что Main.mxml не найден. Смотрю документацию и нахожу свойство, которое отвечает за точку входа. Это mainClass.
Логичнее трудно придумать. Задаем новое значение - build success! Этап pure as3 project пройден.

### Flex unit tests.
Добавляю класс заглушку и тест, который его проверяет. Аналогично maven, необходимо определить местонахождение дебажного FashPlayer.
Опять же, можно использовать системную переменную FLASH_PLAYER_EXE или задать 'flexUnit.command' напрямую. Использую последний метод, как
более явный (ну не люблю я использовать системные переменные). Тем более, что при желании, это можно вынести в свойства и использовать
аналогично профилям maven.
Добавляю требуемые зависимости. Небольшой затык, как обычно, в репозитории. FlexUnit не поддерживает свой репозиторий и в публичные не 
выкладывает, по крайней мере официально. В документации GradleFX настоятельно рекомендуется разворачивать свой репозиторий, но пока 
что-то не сильно хочется.

*Интересно* Есть интересная ссылка на [сервер CI](http://flexunit.digitalprimates.net:8080/). 

*Внимание* В (документации)[http://doc.gradlefx.org/en/latest/flexunit.html] опечатка в зависимости для flexunit-tasks - расширение 'jar', 
а не 'swc'. В примере файловой зависимости написано правильно.

FlexUnit в GradleXF работает через Ant-овский flexunit-tasks. Это не совсем тот сюрприз, который бы я хотел видеть, но с другой стороны, 
зачем дублировать функционал? Проблема в том, что этого файла нет в репозиториях, а сам GradleFX есть. Некоторый поиск показал отсутствие
файла flexUnitTasks-4.1.0-8.jar в публичных репозиториях. Это опять подталкивает к развертыванию своего. Но, для запуска unit тестов
надо три зависимости: сам flexunit, flexunit-tasks (ant часть), flexunit-cilistener для связи между ними. Как-то много для простого теста.
Поэтому беру файловую зависимость из примера.
	gradle test
Вполне удачное завершение.

*Заметка для Win пользователей* Все пути определяются через */*, а не через *\*, как все привыкли под виндой. На эту ошибку вежливо укажет
вывод командной строки, чем здорово сократит время поиска ошибки. Командная строка радует все больше, пока самая информативная из тех, что
я видел.

*Сравнение времени выполнения тестов*
---------------------------------
|build	|gradle	|maven	|idea	|
---------------------------------
|1	|31.061	|37.891	|13	|
---------------------------------
|2	|14.75	|17.516	|7	|
---------------------------------
Для IDEA точное время сказать сложно, суммарно оно не выводится. Сосчитал по логу. Первый запуск: 10 сборка + 3 тесты. Правда 
фактическое время выполнения указано, как 1,56 с. Но по логу завершилось на 1,5 позже. Второй запуск: 5 сборка + 2 тесты. Фактическое
время опять меньше 1,5. Но в любом случае IDEA пока лидер по скорости.

## Ресурсы
- (Gradle online)[http://www.gradle.org/]
- (User guide)[http://www.gradle.org/docs/current/userguide/userguide.html]
- (Список официально признанных плагинов)[http://wiki.gradle.org/display/GRADLE/Plugins]

*Хабр о gradle*
- (Gradle: Better Way To Build)[http://habrahabr.ru/post/107085/]
- (Gradle: Tasks Are Code)[http://habrahabr.ru/post/107558/]
- (Почему Gradle?)[http://habrahabr.ru/post/106717/]
- (Как запускать DBDeploy в Gradle)[http://habrahabr.ru/post/152765/]

- (Maven -> Gradle примеры из жизни, обсуждение)[http://anton-arhipov.livejournal.com/219397.html]

- (GradleFX)[http://gradlefx.org/]
- (GradleFX sources)[https://github.com/GradleFx/GradleFx]

- (Репозиторий с flexunit)[https://maven-us.nuxeo.org]